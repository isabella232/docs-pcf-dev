---
breadcrumb: Pivotal Platform Dev Documentation
title: Configuring Pivotal Platform Dev (Legacy)
owner: Pivotal Platform Dev
---

<p class="note"><strong>Note:</strong> This topic applies only to <%= vars.platform_name %> Dev v0.30 or earlier. If you are using a later version of <%= vars.platform_name %> Dev, see <a href="configuring.html">Configuring <%= vars.platform_name %> Dev</a>.</p>

<%= vars.platform_name %> Dev supports several different configurations. This topic describes how to start <%= vars.platform_name %> Dev with specific memory usage, core count usage, domain, IP address, and <%= vars.platform_name %> services, among others. It also describes ease-of-use functionality, including automatically targeting <%= vars.platform_name %> Dev and trusting <%= vars.platform_name %> Dev certificates. 


## <a id="start-options"></a> Configure <%= vars.platform_name %> Dev

The `cf dev start` command supports the following configuration-specific flags at start up: 

| flag | description |
| ---- | ----------- |
| `-c number-of-cores` | Specify the number of processor cores used by VM. Default: Number of physical cores. |
| `-d domain` |  Specify the domain that the <%= vars.platform_name %> Dev VM occupies. |
| `-i ip-address` |  Specify the IP address that the <%= vars.platform_name %> Dev VM occupies. |
| `-k` |  Import VM certificates into host's trusted certificate store. |
| `-m  memory-in-mb` |  Specify memory to allocate for VM. Default: Half of total memory, with a maximum of 4&nbsp;GB, or 8&nbsp;GB with SCS. |
| `-r registry1,registry2,...` | Specify Docker registries that <%= vars.platform_name %> Dev uses without SSL validation. Use `host:port` format. |
| `-s  service1,service2` | Specify the services started with <%= vars.platform_name %> Dev. <br>Options: redis, rabbitmq, spring-cloud-services (scs), default, all, none <br> Default: redis, rabbitmq <br> (MySQL is always available and cannot be disabled.) |
| `-t` | Specify to perform `cf login` to <%= vars.platform_name %> Dev after starting, as the 'user' user. |

### <a id="domain-and-ip"></a> Domain and IP Address

The `-d` and `-i` flags specify a custom domain and IP address that <%= vars.platform_name %> Dev uses. Specify a domain and IP address if you have your own domain that you want to access using <%= vars.platform_name %> Dev.

If you specify an IP address without a domain, the domain is assumed to be `<ip>.xip.io`.

If you specify a domain, you must also specify an IP address unless the domain is a standard <%= vars.platform_name %> Dev domain. For example, the following are valid domains: `local.pcfdev.io`, `local2.pcfdev.io`.

When you specify both a domain and IP address, no validation occurs.

The following are examples of valid IP address and domain configurations for <%= vars.platform_name %> Dev:

* `cf dev start -i 192.168.54.54`
* `cf dev start -d local3.pcfdev.io`
* `cf dev start -i 192.168.54.54 -d example.com`

However, the following is not a valid configuration:

* `cf dev start -d example.com`

### <a id="insecure-docker-registries"></a> Insecure Docker Registries

<%= vars.platform_name %> Dev allows apps to be pushed from Docker images. By default, these images must be hosted on Docker Hub. The `-r` flag allows you to specify Docker registries that <%= vars.platform_name %> Dev should allow you to push from, even if those registries do not have valid SSL certificates. The following example shows how to start <%= vars.platform_name %> Dev and push an app using an existing insecure docker registry on your host running on port 5000.

<pre class='terminal'>
$ cf dev start -r host.pcfdev.io:5000
...
$ cf dev target
Successfully logged in to api.local.pcfdev.io as user.
$ cf push -o host.pcfdev.io:5000/repository/image
</pre>

### <a id="service-brokers"></a> Service Brokers

By default, <%= vars.platform_name %> Dev starts with the MySQL, Redis, and RabbitMQ service brokers running. The service brokers that are started with <%= vars.platform_name %> Dev can be changed with the `-s` flag.

* `cf dev start -s all` starts all of the service brokers: MySQL, Redis, RabbitMQ, and Spring Cloud Services
* `cf dev start -s none` starts with no additional service brokers, except for the mandatory service broker, MySQL 
* `cf dev start -s redis,scs` starts with Redis and Spring Cloud Services


## <a id="target"></a>Target <%= vars.platform_name %> Dev

To perform a `cf target` on your running <%= vars.platform_name %> Dev instance, regardless of the domain is it currently configured to use, run:

```
cf dev target
```
 
The `cf dev target` command works if the <%= vars.platform_name %> domain is `local.pcfdev.io` (default) or a custom value, such as `cf dev start -d pcfdev.example.com`. Running `cf dev target` performs `cf login` as the user `user` into the 'pcfdev-org' org and 'pcfdev-space' space. The `-t` option to `cf dev start` also performs this operation following the provisioning of the VM. 


## <a id="trust"></a> Trust <%= vars.platform_name %> Dev

Provisioning dynamically creates self-signed certificates used within its components. However, this results in various SSL validation warnings both from the Cloud Foundry Command Line interface (cf CLI), and when using Apps Manager in a browser. To remove these SSL validation warning errors, you can insert this self-signed certificate into your OS certificate store by running:

```
cf dev trust
```

<p class="note"><strong>Note:</strong> Due to the nature of this operation, you may need to provide your system password to successfully insert the certificate.</p>

After running `cf dev trust`, you can log in to <%= vars.platform_name %> Dev without skipping SSL validation by running:

```
cf login -a https://api.local.pcfdev.io # --skip-ssl-validation
```

Adding the `-k` option to `cf dev start` also performs this operation following the provisioning of the VM. To remove these certificates from your certificate store, run: `cf dev untrust`. These certificates are automatically removed as part of a `cf dev destroy`.

<p class="note"><strong>Note:</strong> If you run <code>cf dev destroy</code> and are prompted to enter your password, this is because the plugin is attempting to remove <%= vars.platform_name %> Dev-specific certificates from your certificate store. </p>

The following table shows conditions where `cf dev trust` is expected to remove SSL validation warnings:

| OS | cf CLI | Chrome | Firefox | Internet Explorer |
| -- | ------ | ------ | ------- | ----------------- |
| Mac | ✓ | ✓ | X | - |
| Windows | ✓ | ✓ | X| ✓ |
| Linux | ✓ | X | X | - |
