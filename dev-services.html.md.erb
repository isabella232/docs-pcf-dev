---
breadcrumb: Pivotal Platform Dev Documentation
title: Using Services in Pivotal Platform Dev
owner: Pivotal Platform Dev
---

<strong><%= modified_date %></strong>

This topic describes how to deploy, create, delete, update, and bind Marketplace services in <%= vars.platform_name %> Dev.


## <a id='overview'></a> Overview

<%= vars.platform_name %> Dev provides access to three Marketplace services: Redis, RabbitMQ, and MySQL. You can create instances of these services and bind them to your apps to generate and deliver credentials to your apps.

<p class="note"><strong>Note:</strong> To manage and bind service instances, you must be running the <%= vars.platform_name %> Dev .iso or .tgz, and you must be logged in to your <%= vars.platform_name %> Dev instance. Complete the procedure in <a href="usage.html">Using <%= vars.platform_name %> Dev</a> before following the procedures below.</p>


## <a id='marketplace'></a> List Marketplace Services

To display information about the Marketplace services available in <%= vars.platform_name %> Dev:

1. Run:

    ```
    cf marketplace
    ```

Services that are not started do not appear in Marketplace.


## <a id='marketplace'></a> Deploy Services

<p class="note"><strong>Note:</strong> Ad hoc service deployment requires <%= vars.platform_name %> Dev v1.0.0 or later.</p>

To deploy a service:

1. Run:

    ```
    cf dev deploy-service SERVICE-NAME
    ```
    Where `SERVICE-NAME` is the name of the service you want to deploy: `scs`, `redis`, `rabbitmq`, or `mysql`.

<%= vars.platform_name %> Dev supports Marketplace services, giving developers access to Spring Cloud Services, Redis, RabbitMQ, and MySQL. The table below includes flags and descriptions for each service:

| flag | description |
| ---- | ----------- |
| `scs`  | Server-side components for Spring Cloud projects. |
| `redis` |  Redis service provides a key-value store. |
| `rabbitmq` | RabbitMQ is a robust and scalable high-performance multi-protocol messaging broker. |
| `mysql` | MySQL databases on demand. |


## <a id='create'></a> Create Service Instances

These sections describe how to create a service instance alone, with arbitrary parameters, or with instance tags.

### <a id='create-service-instance'></a> Create a Service Instance

To create a service instance:

1. Run:

    ```
    cf create-service SERVICE PLAN SERVICE-INSTANCE
    ```
    Where:
    * `SERVICE` is the service for which you want to create service instances.
    * `PLAN` is the service plan you want to use. Service plans are a way for providers to offer varying levels of resources or features for the same service.
    * `SERVICE-INSTANCE` is the name you provide for your service instance. You can use any series of alpha-numeric characters, hyphens (-), and underscores (\_). You can rename the instance at any time.

<p class="note"><strong>Note:</strong> For more information about how developers can bind apps with services that are not available in their Pivotal Marketplace, see <a href="http://docs.pivotal.io/pivotalcf/devguide/services/user-provided.html">User Provided Service Instances</a>.</p>

### <a id='arbitrary-params-create'></a> Arbitrary Parameters

<p class="note"><strong>Note:</strong> Arbitrary parameters require cf CLI v6.12.1 or later.</p>

Some services support additional configuration parameters with the provision request. These parameters are passed in a valid JSON object containing service-specific configuration parameters, provided either in-line or in a JSON file. For a list of supported configuration parameters, see the documentation for the particular service offering.

To provide parameters in-line:

1. Run:

    ```
    cf create-service SERVICE PLAN SERVICE-INSTANCE -c 'PARAMETERS-JSON-OBJECT'
    ```
    Where:
    * `SERVICE` is the service for which you want to create service instances.
    * `PLAN` is the service plan you want to use.
    * `SERVICE-INSTANCE` is the name you provide for your service instance.
    * `PARAMETERS` is the JSON object containing the parameters you want to configure.

To provide parameters in a JSON file:

1. Run:

    ```
    cf create-service SERVICE PLAN SERVICE-INSTANCE -c PARAMETERS-JSON-FILE-PATH
    ```
    Where:
    * `SERVICE` is the service for which you want to create service instances.
    * `PLAN` is the service plan you want to use.
    * `SERVICE-INSTANCE` is the name you provide for your service instance.
    * `PARAMETERS-JSON-FILE-PATH` is the file path of the JSON file containing the parameters you want to configure.

### <a id='instance-tags-create'></a> Instance Tags

<p class="note"><strong>Note:</strong> Instance tags require cf CLI v6.12.1 or later.</p>

Some services provide a list of tags that <%= vars.platform_name %> delivers in the VCAP_SERVICES environment variable. These tags provide developers with a more generic way for apps to parse `VCAP_SERVICES` for credentials. Developers can provide their own tags when creating a service instance by including a comma-separated list of tags with the `-t` flag. For more information, see the [VCAP_SERVICES](http://docs.pivotal.io/pivotalcf/devguide/deploy-apps/environment-variable.html#VCAP-SERVICES) section of the _PAS Environment Variables_ topic.

To provide tags when creating a service instance:

1. Run:

    ```
    cf create-service SERVICE PLAN SERVICE-INSTANCE -t "TAG-1, TAG-2"
    ```
    Where:
    * `SERVICE` is the service for which you want to create service instances.
    * `PLAN` is the service plan you want to use.
    * `SERVICE-INSTANCE` is the name you provide for your service instance.
    * `TAG-1` and `TAG-2` are the tags you want to provide the service instance.


## <a id='examine'></a> Examine Service Instances

These sections describe how to list the service instances in your targeted space and get details for a particular service instance.

### <a id='list'></a> List Service Instances

To list the service instances in your targeted space:

1. Run:

    ```
    cf services
    ```

The output includes any bound apps, along with the state of the last requested operation for the service instance.

### <a id='get-details'></a> Get Details for a Particular Service Instance

To get details about a particular service instance:

1. Run:

    ```
    cf service SERVICE-INSTANCE
    ```
    Where `SERVICE-INSTANCE` is the name of the service instance you want to examine.

Details include dashboard URLs, if applicable, and operation start and last updated timestamps.


## <a id='rename_service'></a> Rename a Service Instance

You can change the name given to a service instance. When restarting any bound apps, the name of the instance changes in the VCAP_SERVICES environment variable. If your app depends on the instance name for discovering credentials, changing the name could break your app's use of the service instance.

To rename a service instance:

1. Run:

    ```
    cf rename-service OLD-SERVICE-INSTANCE-NAME NEW-SERVICE-INSTANCE-NAME
    ```
    Where:
    * `OLD-SERVICE-INSTANCE-NAME` is the current name of the service instance.
    * `NEW-SERVICE-INSTANCE-NAME` is the new name you want to give the service instance.


## <a id='update_service'></a> Update a Service Instance

These sections describe how to update a service instance's service plan, arbitrary parameters, or instance tags.

### <a id='upgrade-downgrade'></a> Upgrade or Downgrade Service Plan

<p class="note"><strong>Note:</strong> Changing a plan requires cf CLI v6.7 or later and cf-release v192 or later.</p>

By updating the service plan for a service instance, users can effectively upgrade and downgrade their service instance to other service plans. Though the platform and CLI support this feature, services must expressly implement support for it, and not all services do. Furthermore, a service might support updating between some plans but not others. For example, a service might support updating a plan where only a logical change is required, but not where data migration is necessary. In either case, users can expect to see a meaningful error when plan update is not supported.

To update the service plan for a service instance:

1. Run:

    ```
    cf update-service SERVICE-INSTANCE -p SERVICE-PLAN
    ```
    Where:
    * `SERVICE-INSTANCE` is the name of the service instance.
    * `SERVICE-PLAN` is the name of the service plan you want to update.

### <a id='arbitrary-params-update'></a> Arbitrary Parameters

<p class="note"><strong>Note:</strong> Arbitrary parameters require cf CLI v6.12.1 or later.</p>

Some services support additional configuration parameters with the update request. These parameters are passed in a valid JSON object containing service-specific configuration parameters, provided either in-line or in a JSON file. For a list of supported configuration parameters, see the documentation for the particular service offering.

To update the parameters of a service instance in-line:

1. Run:

    ```
    cf update-service SERVICE-INSTANCE -c 'PARAMETERS-JSON-OBJECT'
    ```
    Where:
    * `SERVICE-INSTANCE` is the name of your service instance.
    * `PARAMETERS` is the JSON object containing the parameters you want to update.

To update the parameters of a service instance with a JSON file:

1. Run:

    ```
    cf update-service SERVICE-INSTANCE -c PARAMETERS-JSON-FILE-PATH
    ```
    Where:
    * `SERVICE-INSTANCE` is the name of your service instance.
    * `PARAMETERS-JSON-FILE-PATH` is the file path of the JSON file containing the parameters you want to update.

### <a id='instance-tags-update'></a> Instance Tags

<p class="note"><strong>Note:</strong> Instance tags require cf CLI v6.12.1 or later.</p>

Some services provide a list of tags that <%= vars.platform_name %> delivers in the VCAP_SERVICES environment variable. These tags provide developers with a more generic way for apps to parse `VCAP_SERVICES` for credentials. Developers can provide their own tags when creating a service instance by including a comma-separated list of tags with the `-t` flag.

To update the tags of a service instance:

1. Run:

    ```
    cf update-service SERVICE-INSTANCE -t "TAG-1, TAG-2"
    ```
    Where:
    * `SERVICE-INSTANCE` is the name of your service instance.
    * `TAG-1` and `TAG-2` are the tags you want to update.


## <a id='delete'></a> Delete a Service Instance

Deleting a service instance deprovisions the service instance and deletes all data associated with the service instance.

To delete a service instance:

1. Run:

    ```
    cf delete-service SERVICE-INSTANCE
    ```
    Where `SERVICE-INSTANCE` is the name of the service instance you want to delete.

1. When you are prompted to confirm that you want to delete the service instance, enter `y`.


## <a id='bind'></a> Bind Service Instances

These sections describe how to bind a service instance to your app alone, bind a service instance to your app with arbitrary parameters, use an app manifest to bind the service instance during a push, and configure apps with bound service instances to consume binding credentials.

### <a id='bind-service-instance'></a> Bind a Service Instance

Binding a service instance to your app triggers credentials to be provisioned for the service instance and delivered to the app runtime in the VCAP_SERVICES environment variable. For details on consuming these credentials with your app, see [Using Bound Service Instances](#use). Not all services support binding, as some services deliver value to users directly without integration with an app.

To bind a service instance to your app:

1. Run:

    ```
    cf bind-service APP-NAME SERVICE-INSTANCE
    ```
    Where:
    * `APP-NAME` is the name of your app.
    * `SERVICE-INSTANCE` is the name of the service instance you want to bind to your app.

1. Restage your app by running:

    ```
    cf restage APP-NAME
    ```
    Where `APP-NAME` is the name of your app.

<p class="note"><strong>Note:</strong> You must restart or in some cases re-push your app for changes to be applied to the VCAP_SERVICES environment variable and for the app to recognize these changes.</p>

### <a id='arbitrary-params-binding'></a> Arbitrary Parameters

<p class="note"><strong>Note:</strong> Arbitrary parameters require cf CLI v6.12.1 or later.</p>

Some services support additional configuration parameters with the bind request. These parameters are passed in a valid JSON object containing service-specific configuration parameters, provided either in-line or in a JSON file. For a list of supported configuration parameters, see the documentation for the particular service offering.

To bind a service instance to your app with parameters in-line:

1. Run:

    ```
    cf APP-NAME SERVICE-INSTANCE -c 'PARAMETERS-JSON-OBJECT'
    ```
    Where:
    * `APP-NAME` is the name of your app.
    * `SERVICE-INSTANCE` is the name of the service instance you want to bind to your app.
    * `PARAMETERS-JSON-OBJECT` is the JSON object containing the parameters you want to configure.

1. Restage your app by running:

    ```
    cf restage APP-NAME
    ```
    Where `APP-NAME` is the name of your app.

To bind a service instance to your app with in a JSON file:

1. Run:

    ```
    cf bind-service APP-NAME SERVICE-INSTANCE -c PARAMETERS-JSON-FILE-PATH
    ```
    Where:
    * `APP-NAME` is the name of your app.
    * `SERVICE-INSTANCE` is the name of the service instance you want to bind to your app.
    * `PARAMETERS-JSON-FILE-PATH` is the file path of the JSON file containing the parameters you want to configure.

1. Restage your app by running:

    ```
    cf restage APP-NAME
    ```
    Where `APP-NAME` is the name of your app.

### <a id='bind-with-manifest'></a> Binding with App Manifest

As an alternative to binding a service instance after pushing an app, you can use the app manifest to bind the service instance during a push. As of cf CLI v6.12.1, arbitrary parameters are not supported in app manifests.

To bind a service instance to your app on push:

1. Add the following to your app manifest:

    ```
    services:
     - SERVICE-INSTANCE
    ```
    Where `SERVICE-INSTANCE` is the name of the service instance you want to bind to your app.

For more information about app manifests, see [Deploying with App Manifests](http://docs.pivotal.io/pivotalcf/devguide/deploy-apps/manifest.html).

### <a id='use'></a> Using Bound Service Instances

Once you have a service instance created and bound to your app, you must configure the app to dynamically fetch the credentials for your service instance. The VCAP_SERVICES environment variable contains credentials and additional metadata for all bound service instances. There are two methods you can use to configure your apps to consume binding credentials:

* **Parse the JSON yourself:** For more information, see the [VCAP_SERVICES](http://docs.pivotal.io/pivotalcf/devguide/deploy-apps/environment-variable.html#VCAP-SERVICES) section of the _PAS Environment Variables_ topic. Helper libraries are available for some frameworks.

* **Auto-configuration:** Some buildpacks create a service connection for you by creating additional environment variables, updating config files, or passing system parameters to the JVM.

For details on consuming credentials specific to your development framework, see the _Service Binding_ section in [the documentation for your framework's buildpack](https://docs.pivotal.io/platform/application-service/buildpacks/index.html).


## <a id='update-credentials'></a> Update Service Credentials

To update your service credentials:

1. Unbind the service instance using the credentials you are updating by running:

    ```
    cf unbind-service APP-NAME SERVICE-INSTANCE
    ```
    Where:
    * `APP-NAME` is the name of your app.
    * `SERVICE-INSTANCE` is the name of the service instance for which you want to update credentials.

1. Re-bind the service instance by running:

    ```
    cf bind-service APP-NAME SERVICE-INSTANCE
    ```
    Where:
    * `APP-NAME` is the name of your app.
    * `SERVICE-INSTANCE` is the name of the service instance for which you want to update credentials.
    This adds your credentials to the VCAP_SERVICES environment variable.

1. Restart or re-push the app bound to the service instance so the app recognizes your environment variable updates.


## <a id='unbind'></a> Unbind a Service Instance

Unbinding a service instance removes the credentials created for your app from the VCAP_SERVICES environment variable.

To unbind a service instance from your app:

1. Run:

    ```
    cf unbind-service APP-NAME SERVICE-INSTANCE
    ```
    Where:
    * `APP-NAME` is the name of your app.
    * `SERVICE-INSTANCE` is the name of the service instance you want to unbind from your app.

1. Restart or re-push the app bound to the service instance so the app recognizes your environment variable updates.
